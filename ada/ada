#!/bin/bash

# This script talks to the dCache API.
#
# Design: Natalie & Onno, SURFsara.
#
# Latest version is available at: https://github.com/sara-nl/SpiderScripts
#
# Changes:
# 2020-01-28 - Onno    - Created
# 2020-02-14 - Onno    - Support for server-sent events
#

usage() {
  cat <<-EOF
	ADA - Access dCache API.
	Usage: $0 [options...]
	Options are:
	  (todo)
	  --debug                - Show what's going on.

	Default values can be stored in /etc/ada.conf and ~/.ada.conf

	Examples:
	  $0 ... (todo)

	EOF
  exit 1
}

# Set default values
api=
debug=false
path=
recursive=false

# Load defaults from configuration file if exists
declare -a configfiles=( /etc/ada.conf ~/.ada.conf )
for configfile in ${configfiles[@]} ; do
  if [ -f "$configfile" ] ; then
    $debug && echo "Loading $configfile"
    source "$configfile"
  fi
done


# Process command line arguments
while [ $# -gt 0 ] ; do
  case "$1" in
    --token )
      token="$2"
      shift ; shift   # 'shift 2' won't work if $2 doesn't exist.
      ;;
    --tokenfile )
      tokenfile="$2"
      shift ; shift
      ;;
    --api )
      api="$2"
      shift ; shift
      ;;
    --whoami )
      command=whoami
      shift
      ;;
    --list )
      command=list
      path="$2"
      shift ; shift
      ;;
    --longlist )
      command=longlist
      if [ "$2" = "--from-file" ] ; then
        $debug && echo "Reading list '$3'"
        pathlist=$(<"$3")
        shift ; shift ; shift
      else
	pathlist="$2"
        shift ; shift
      fi
      ;;
    --mkdir )
      command=mkdir
      path="$2"
      shift ; shift
      ;;
    --mv )
      command=mv
      path="$2"
      destination="$3"
      shift ; shift ; shift
      ;;
    --delete )
      command=delete
      path="$2"
      shift ; shift
      ;;
    --checksum )
      command=checksum
      if [ "$2" = "--from-file" ] ; then
       	pathlist=$(<"$3")
        shift ; shift ; shift
      else
        pathlist="$2"
        shift ; shift
      fi
      ;;
    --stage )
      command=stage
      if [[ $2 =~ ^--from-?file ]] ; then
        pathlist=$(<"$3")
       	shift ;	shift ;	shift
      else
        pathlist="$2"
        shift ; shift
      fi
      ;;
    --unstage )
      command=unstage
      if [[ $2 =~ ^--from-?file ]] ; then
        pathlist=$(<"$3")
        shift ; shift ; shift
      else
	pathlist="$2"
        shift ; shift
      fi
      ;;
    --events )
      command=events
      channelname="$2"
      path="$3"
      shift ; shift ; shift
      ;;
    --recursive )
      recursive=true
      shift
      ;;
    --debug )
      debug=true
      shift
      ;;
    *)
      echo "ERROR: unknown option '$1'."
      usage
      ;;
  esac
done

#
# Validate input
#

if [ -z "$token" ] ; then
  if [ -n "$tokenfile" ] ; then
    token=$(sed -n 's/^bearer_token *= *//p' "$tokenfile")
    if [ $(wc -l <<<"$token") -gt 1 ] ; then
      echo "ERROR: file '$tokenfile' contains multiple tokens."
      exit 1
    fi
    if [ -z "$token" ] ; then
      echo "ERROR: could not read token from tokenfile."
      exit 1
    fi
  else
    echo "ERROR: no token or tokenfile specified."
    exit 1
  fi
fi

case $command in
  list | mkdir | mv | delete | events )
    if [[ -z $path || $path =~ ^-- ]] ; then
      echo "ERROR: command $command requires a path."
      exit 1
    fi
    case $command in
      mv )
        if [[ -z $destination || $destination =~ ^-- ]] ; then
          echo "ERROR: command $command requires a destination."
          exit 1
        fi
        ;;
      events )
        if [[ -z $channelname || $channelname =~ ^-- ]] ; then
          echo "ERROR: command $command requires a channel name."
          exit 1
        fi
        ;;
    esac
    ;;
  longlist | checksum | stage | unstage )
    if [[ -z $pathlist || $pathlist =~ ^-- ]] ; then
      echo "ERROR: command $command requires a path or a path list."
      exit 1
    fi
    ;;
esac

if [ -z "$api" ] ; then
  echo "ERROR: no API specified. Use --api <api> or specify a default API in one of the configuration files (${configfiles[@]})."
fi

#
# End of input validation
#



#
# Construction of curl command arguments.
# These are put in arrays for easier handling of quotes.
#

# Construct the authorization part of the curl command.
curl_authorization=( "-H" "Authorization: Bearer $token" )

# Other curl arguments
curl_options_common=(
                      -H "accept: application/json"
                      --fail --silent --show-error
                    )
curl_options_post=(
                    -H "content-type: application/json"
                  )
curl_options_stream=(
                      -H 'accept: text/event-stream'
                      --no-buffer
                      --fail --silent --show-error
                    )

#
# Define functions we need.
#

urlencode () {
  # We use jq for encoding the URL, because we need jq anyway.
  $debug && echo "urlencoding '$1' to '$(printf "$1" | jq -sRr @uri)'" 1>&2
  printf "$1" | jq -sRr @uri
}


pathtype () {
  local path=$(urlencode "$1")
  curl "${curl_authorization[@]}" \
       "${curl_options_common[@]}" \
       -X GET "$api/namespace/$path?children=false&locality=false&locations=false&qos=false" \
  | jq -r .fileType
}


get_channel_by_name () {
  local channelname="$1"
  channel=$(
             (
               $debug && set -x
               curl "${curl_authorization[@]}" \
                    "${curl_options_common[@]}" \
                    -X GET "$api/events/channels?client-id=$channelname"
              ) \
              | jq -r '.[]'
           )
  channel_count=$(wc -l <<<"$channel")
  if [ "$channel_count" -gt 1 ] ; then
    echo "ERROR: there is more than one channel with that name:"
    echo "$channel"
    exit 1
  fi
  echo "$channel"
}


channel_subscribe () {
  local channel="$1"
  local path="$2"
  (
    $debug && set -x
    curl "${curl_authorization[@]}" \
         "${curl_options_common[@]}" \
         "${curl_options_post[@]}" \
         -X POST "$channel/subscriptions/inotify" \
         -d "{\"path\":\"$path\"}"
  )
}


get_subscriptions_by_channel () {
  local channel="$1"
  (
    $debug && set -x
    curl "${curl_authorization[@]}" \
         "${curl_options_common[@]}" \
         -X GET "$channel/subscriptions"
  ) \
  | jq -r '.[]'
}


list_subscription () {
  local subscription="$1"
  (
    $debug && set -x
    curl "${curl_authorization[@]}" \
         "${curl_options_common[@]}" \
         -X GET "$subscription"
  ) \
  | jq
}


get_path_from_subscription () {
  local subscription="$1"
  (
    $debug && set -x
    curl "${curl_authorization[@]}" \
         "${curl_options_common[@]}" \
         -X GET "$subscription"
  ) \
  | jq -r .path
}


follow_channel () {
  local channel="$1"
  declare -A subscriptions
  mkdir -p ~/.ada
  short_channel_name=$(basename "$channel")
  (
    $debug && set -x
    curl "${curl_authorization[@]}" \
         "${curl_options_stream[@]}" \
         -X GET "$channel"
  ) \
  | while IFS=': ' read key value ; do
      case $key in
        event )
          if [ "$value" != "inotify" ] ; then
            echo "ERROR: don't know how to handle event type '$value'."
            exit 1
          fi
          ;;
        id )
          # Save event number so we can resume later.
          event_id="$value"
          ;;
        data )
          $debug && { echo ; echo "$value" | jq --compact-output ; }
          # Sometimes there's no .event.name: then 'select (.!=null)' will output an empty string.
          object_name=$(jq -r '.event.name | select (.!=null)' <<< "$value")
          mask=$(jq -r '.event.mask | @csv' <<< "$value" | tr -d '"')
          cookie=$(jq -r '.event.cookie | select (.!=null)' <<<"$value")
          subscription=$(jq -r '.subscription' <<< "$value")
          subscription_id=$(basename "$subscription")
          # We want to output not only the file name, but the full path.
          # We get the path from the API, but we cache the result
          # in an array for performance.
          if [ ! ${subscriptions[$subscription_id]+_} ] ; then
            # Not cached yet; get the path and store it in an array.
            subscriptions[$subscription_id]=$(get_path_from_subscription "$subscription")
          fi
          path="${subscriptions[$subscription_id]}"
          #
          # If recursion is requested, we need to start following new directories.
          if $recursive ; then
            if [ "$mask" = "IN_CREATE,IN_ISDIR" ] ; then
              channel_subscribe "$channel" "$path/$object_name"
            fi
          fi
          #
          # A move or rename operation consists of two events,
          # an IN_MOVED_FROM and an IN_MOVED_FROM, both with
          # a cookie (ID) to relate them.
          if [ -n "$cookie" ] ; then
            cookie_string="  cookie:$cookie"
          else
            cookie_string=
          fi
          # Here comes the output.
          echo -e "${path}/${object_name}  ${mask}${cookie_string}"
          #
          # When done with this event's data, save the event ID.
          # This can be used to resume the channel.
          echo "$event_id" > ~/.ada/"$short_channel_name"
          ;;
        '' )
          # Empty line, just skip it.
          ;;
        * )
          echo "ERROR: don't know how to handle '$key: $value'."
          exit 1
          ;;
      esac
  done
}


#
# Execute API call(s).
#

case $command in
  whoami )
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           "${curl_options_common[@]}" \
           -X GET "$api/user"
    ) \
    | jq
    ;;
  list )
    type=$(pathtype "$path")
    case $type in
      DIR )
        (
          $debug && set -x   # If --debug is specified, show (only) curl command
          curl "${curl_authorization[@]}" \
               "${curl_options_common[@]}" \
               -X GET "$api/namespace/$(urlencode "$path")?children=true&locality=false&locations=false&qos=false"
        ) \
        | jq -r '.children | .[] | [ .fileName , .fileType ] | @tsv' \
        | sed -e 's@\tREGULAR@@' \
              -e 's@\tDIR@/@' \
              -e 's@\tLINK@@' \
        | sort
        ;;
      REGULAR | LINK )
        # User asked listing of a regular file (not a dir).
        # No addition data is needed, the pathtype command has already checked that the file exists;
        # So we only list the file name. Nothing more.
        echo "$path"
        ;;
      '' )
        # No valid object. Do nothing.
        ;;
      * )
        echo "Unknown object type '$type'. Please create an issue for this in Github."
        ;;
    esac
    ;;
  longlist )
    while read path ; do
      type=$(pathtype "$path")
      encoded_path=$(urlencode "$path")
      case $type in
        DIR )
          (
            $debug && set -x   # If --debug is specified, show (only) curl command
            curl "${curl_authorization[@]}" \
                 "${curl_options_common[@]}" \
                 -X GET "$api/namespace/$encoded_path?children=true&locality=true&locations=false&qos=true"
          ) \
          | jq -r '.children | .[]
                   | [ .fileName ,
                       .fileType ,
                       .size ,
                       (.mtime / 1000 | strftime("%Y-%m-%d %H:%M UTC")) ,
                       .currentQos ,
                       .fileLocality ]
                   | @tsv' \
          | sed -e 's@\tREGULAR@@' \
                -e 's@\tDIR@/@' \
                -e 's@\tLINK@@'
          # Note: it would be better to use strflocaltime instead of strftime,
          # but that requires a newer version of jq than Centos 7 has.
          ;;
        REGULAR | LINK )
          (
            $debug && set -x   # If --debug is specified, show (only) curl command
            curl "${curl_authorization[@]}" \
                 "${curl_options_common[@]}" \
                  -X GET "$api/namespace/$encoded_path?children=false&locality=true&locations=false&qos=true"
          ) \
          | jq -r '[ .size ,
                     (.mtime / 1000 | strftime("%Y-%m-%d %H:%M UTC")) ,
                     .currentQos ,
                     .fileLocality ]
                   | @tsv' \
          | sed -e "s@^@$path\t@"
          ;;
      esac
    done <<<"$pathlist" \
    | column -t -s $'\t' \
    | sort
    ;;    
  mkdir )
    parent=$(urlencode $(dirname "$path"))
    name=$(basename "$path")
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           "${curl_options_common[@]}" \
           "${curl_options_post[@]}" \
           -X POST "$api/namespace/$parent" \
           -d "{\"action\":\"mkdir\";\"name\":\"$name\"}"
    ) \
    | jq -r .status
    ;;
  mv )
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           "${curl_options_common[@]}" \
           "${curl_options_post[@]}" \
           -X POST "$api/namespace/$path" \
           -d "{\"action\":\"mv\";\"destination\":\"$destination\"}"
    ) \
    | jq -r .status
    ;;
  delete )
    encoded_path=$(urlencode "$path")
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           "${curl_options_common[@]}" \
           -X DELETE "$api/namespace/$encoded_path"
    ) \
    | jq -r .status
    ;;
  checksum )
    while read path ; do
      encoded_path=$(urlencode "$path")
      (
        $debug && set -x   # If --debug is specified, show (only) curl command
        curl "${curl_authorization[@]}" \
             "${curl_options_common[@]}" \
             -X GET "$api/namespace/$encoded_path?children=false&locality=false&locations=false&qos=false"
      ) \
      | jq -r '.pnfsId' \
      | { 
          read pnfsid
          echo -n -e "$path\t"
          if [ -z "$pnfsid" ] ; then
            continue  # skip to next $path
          fi
          (
            $debug && set -x
            curl "${curl_authorization[@]}" \
                 "${curl_options_common[@]}" \
                 -X GET "$api/id/$pnfsid"
          ) \
          | jq -r '.checksums | .[] | [ .type , .value ] | @tsv' \
          | sed -e 's/\t/=/' | tr '\n' '\t'
          echo
        }
    done <<<"$pathlist" \
    | column -t -s $'\t'
    ;;
  stage | unstage )
    case $command in
      stage   )  target='disk+tape'  ;;
      unstage )  target='tape'       ;;
    esac
    while read path ; do
      encoded_path=$(urlencode "$path")
      (
        $debug && set -x   # If --debug is specified, show (only) curl command
        curl "${curl_authorization[@]}" \
             "${curl_options_common[@]}" \
             "${curl_options_post[@]}" \
             -X POST "$api/namespace/$encoded_path" \
             -d "{\"action\":\"qos\";\"target\":\"$target\"}"
      ) | jq -r .status
    done <<<"$pathlist" \
    | column -t -s $'\t'  
    ;;
  events )
    channel=$(get_channel_by_name "$channelname")
    if [ "$channel" = "" ] ; then
      # Channel doesn't exist; create it.
      (
        $debug && set -x
        curl "${curl_authorization[@]}" \
             "${curl_options_common[@]}" \
             "${curl_options_post[@]}" \
             -X POST "$api/events/channels" -d "{\"client-id\":\"$channelname\"}"
      )
      channel=$(get_channel_by_name "$channelname")
    fi
    echo "Channel: $channel"
    channel_subscribe "$channel" "$path"
    for subscription in $(get_subscriptions_by_channel "$channel") ; do
      list_subscription "$subscription"
    done
    echo "Following..."
    follow_channel "$channel"
    ;;
  * )
    echo "Command $command is not implemented (yet)."
    ;;
esac
