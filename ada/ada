#!/bin/bash

# This script talks to the dCache API.
#
# Design: Natalie & Onno, SURFsara.
#
# Latest version is available at: https://github.com/sara-nl/SpiderScripts
#
# Changes:
# 2020-01-28 - Onno    - Created
#

usage() {
  cat <<-EOF
	ADA - Access dCache API.
	Usage: $0 [options...]
	Options are:
	  (todo)
	  --debug                - Show what's going on.

	Default values can be stored in /etc/ada.conf and ~/.ada.conf
	Their signature is not logged to prevent theft.

	Examples:
	  $0 ... (todo)

	EOF
  exit 1
}

# Set default values
api=
debug=false
path=

# Load defaults from configuration file if exists
for configfile in /etc/ada.conf ~/.ada.conf ; do
  if [ -f "$configfile" ] ; then
    $debug && echo "Loading $configfile"
    source "$configfile"
  fi
done


# Process command line arguments
while [ $# -gt 0 ] ; do
  case "$1" in
    --token )
      token="$2"
      shift ; shift
      ;;
    --tokenfile )
      tokenfile="$2"
      shift ; shift
      ;;
    --api )
      api="$2"
      shift ; shift
      ;;
    --whoami )
      command=whoami
      shift
      ;;
    --list )
      command=list
      path="$2"
      shift ; shift
      ;;
    --longlist )
      command=longlist
      path="$2"
      shift ; shift
      ;;
    --mkdir )
      command=mkdir
      path="$2"
      shift ; shift
      ;;
    --mv )
      command=mv
      path="$2"
      destination="$3"
      shift ; shift ; shift
      ;;
    --debug )
      debug=true
      shift 1
      ;;
    *)
      usage
      ;;
  esac
done


if [ -z "$token" ] ; then
  if [ -n "$tokenfile" ] ; then
    token=$(sed -n 's/^bearer_token *= *//p' "$tokenfile")
    if [ $(wc -l <<<"$token") -gt 1 ] ; then
      echo "ERROR: file '$tokenfile' contains multiple tokens."
      exit 1
    fi
    if [ -z "$token" ] ; then
      echo "ERROR: could not read token from tokenfile."
      exit 1
    fi
  else
    echo "ERROR: no token or tokenfile specified."
    exit 1
  fi
fi

case $command in
  list | longlist | mkdir | mv )
    if [[ -z $path || $path =~ ^-- ]] ; then
      echo "ERROR: command $command requires a path."
      exit 1
    fi
    if [ "$command" = "mv" ] ; then 
      if [[ -z $destination || $destination =~ ^-- ]] ; then
        echo "ERROR: command $command requires a destination."
        exit 1
      fi
    fi
    ;;
esac

# Construct the authorization part of the curl command.
# It's an array for easier handling of quotes.
curl_authorization=( "-H" "Authorization: Bearer $token" )

case $command in
  whoami )
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           -X GET "$api/user" \
           -H  "accept: application/json" --fail --silent --show-error
    ) \
    | jq
    ;;
  list )
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           -X GET "$api/namespace/$path?children=true&locality=false&locations=false&qos=false" \
           -H  "accept: application/json" --fail --silent --show-error
    ) \
    | jq -r '.children | .[] | [ .fileName , .fileType ] | @csv' \
    | sed -e 's/^"//' \
          -e 's/",/,/' \
          -e 's/,"REGULAR"//' \
          -e 's@,"DIR"@/@' \
    | sort
    ;;
  longlist )
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           -X GET "$api/namespace/$path?children=true&locality=false&locations=false&qos=false" \
           -H  "accept: application/json" --fail --silent --show-error
    ) \
    | jq -r '.children | .[] | [ .fileName , .fileType , .size , (.mtime / 1000 | strftime("%Y-%m-%d %H:%M UTC")) ] | @csv' \
    | sed -e 's@","REGULAR"@@' \
          -e 's@","DIR"@/@' \
    | column -t -s, \
    | sed -e 's/^"//' \
          -e 's/"$//' \
          -e 's/","//g' \
          -e 's/"20/20/' \
    | sort
    # Note: it would be better to use strflocaltime instead of strftime,
    # but that requires a newer version of jq than Centos 7 has.
    ;;
  mkdir )
    parent=$(dirname "$path")
    name=$(basename "$path")
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           -X POST "$api/namespace/$parent" \
           -H "accept: application/json" \
           -H "content-type: application/json" \
           -d "{ \"action\":\"mkdir\";\"name\":\"$name\"}" --fail --silent --show-error
    ) \
    | jq -r .status
    ;;
  mv )
    (
      $debug && set -x   # If --debug is specified, show (only) curl command
      curl "${curl_authorization[@]}" \
           -X POST "$api/namespace/$path" \
           -H "accept: application/json" \
           -H "content-type: application/json" \
           -d "{ \"action\":\"mv\";\"destination\":\"$destination\"}" --fail --silent --show-error
    ) \
    | jq -r .status
    ;;
  * )
    echo "Command $command is not implemented (yet)."
    ;;
esac
